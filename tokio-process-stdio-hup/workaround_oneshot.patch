diff --git src/main.rs src/main.rs
index be2356b..5dd696d 100644
--- src/main.rs
+++ src/main.rs
@@ -1,3 +1,4 @@
+use std::future::Future;
 use std::pin::Pin;
 use std::process::Stdio;
 use std::sync::{Arc, Mutex};
@@ -6,6 +7,7 @@ use std::time::Duration;
 
 use tokio::prelude::*;
 use tokio::process::Command;
+use tokio::sync::oneshot;
 
 #[tokio::main(core_threads = 1)]
 async fn main() {
@@ -15,6 +17,8 @@ async fn main() {
         .spawn()
         .unwrap();
 
+    let (tx, rx) = oneshot::channel();
+
     let writing = Arc::new(Mutex::new(false));
     let shutdown = Arc::new(Mutex::new(false));
 
@@ -22,6 +26,7 @@ async fn main() {
         inner: child.stdin.take().unwrap(),
         writing: writing.clone(),
         shutdown: shutdown.clone(),
+        process_terminated: rx,
     };
 
     // Spawn a task which writes large amounts of data to `input`.
@@ -40,6 +45,9 @@ async fn main() {
 
     let _ = child.await;
 
+    // Notify the pending write that the child process terminated.
+    let _ = tx.send(());
+
     // Expected behavior
     // -----------------
     // The following `await` returns quickly because the task ends with a broken
@@ -56,6 +64,8 @@ struct Wrapper<W> {
     inner: W,
     writing: Arc<Mutex<bool>>,
     shutdown: Arc<Mutex<bool>>,
+    // Used for waking up the pending write when the child process terminated.
+    process_terminated: oneshot::Receiver<()>,
 }
 
 impl<W: AsyncWrite + Unpin> AsyncWrite for Wrapper<W> {
@@ -66,7 +76,16 @@ impl<W: AsyncWrite + Unpin> AsyncWrite for Wrapper<W> {
         buf: &[u8]
     ) -> Poll<io::Result<usize>> {
         let poll = Pin::new(&mut self.inner).poll_write(cx, buf);
-        *self.writing.lock().unwrap() = poll.is_pending();
+        if poll.is_pending() {
+            *self.writing.lock().unwrap() = true;
+            // Call `poll()` in order to wake up the pending write when the
+            // child process terminated.
+            if Pin::new(&mut self.process_terminated).poll(cx).is_ready() {
+                return Poll::Ready(Ok(0));
+            }
+        } else {
+            *self.writing.lock().unwrap() = false;
+        }
         poll
     }
 
